// Code generated by scripttestutil scripttest; DO NOT EDIT.
package main

import (
	"context"
	"encoding/json"
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"testing"
	"time"

	"rsc.io/script"
	"rsc.io/script/scripttest"
)

// Build: {{.BuildID}}

func Test(t *testing.T) {
	// Start with default commands
	cmds := scripttest.DefaultCmds()

	// Add any inferred commands
	extendedCmds, err := addInferredCommands(cmds)
	if err != nil {
		t.Logf("warning: failed to load extended commands: %v", err)
	} else {
		cmds = extendedCmds
	}

	engine := &script.Engine{
		Cmds:  cmds,
		Conds: scripttest.DefaultConds(),
		Quiet: !testing.Verbose(),
	}

	pattern := "testdata/*.txt"
	if v := os.Getenv("SCRIPTTEST_PATTERN"); v != "" {
		pattern = v
	}

	// Start with minimal environment
	env := []string{
		// TODO: consider adding flags to control this further.
		"HOME=" + os.Getenv("HOME"),
		"PATH=" + os.Getenv("PATH"),
		"TMPDIR=" + os.TempDir(),
		"SCRIPTTEST_PATTERN=" + pattern,
	}

	// Add gopath bin paths
	var paths []string
	if gopath := os.Getenv("GOPATH"); gopath != "" {
		paths = append(paths, filepath.Join(gopath, "bin"))
		env = append(env, "GOPATH=" + gopath)
		env[0] = "PATH=" + filepath.Join(paths...)
	}
	t.Log("starting up")
	scripttest.Test(t, context.Background(), engine, env, pattern)
}

// CommandInfo describes an inferred command
type CommandInfo struct {
	Name    string `json:"name"`    // command name
	Summary string `json:"summary"` // usage summary
	Args    string `json:"args"`    // argument pattern
}

// addInferredCommands adds commands from .scripttest_info to the engine
func addInferredCommands(cmds map[string]script.Cmd) (map[string]script.Cmd, error) {
	info, err := loadCommandInfo()
	if err != nil {
		if os.IsNotExist(err) {
			return cmds, nil // no info file is ok
		}
		return nil, fmt.Errorf("failed to load command info: %v", err)
	}

	// Create a command that runs the program
	interrupt := func(cmd *exec.Cmd) error { return cmd.Process.Signal(os.Interrupt) }
	gracePeriod := 30 * time.Second // arbitrary
	// Add each command from info
	for _, cmd := range info {
		if _, exists := cmds[cmd.Name]; exists {
			continue // don't override built-in commands
		}

		cmds[cmd.Name] = script.Program(cmd.Name, interrupt, gracePeriod)
		//cmds[cmd.Name] = script.Command(
		//	script.CmdUsage{
		//		Summary: cmd.Summary,
		//		Args:    cmd.Args,
		//	},
		//	makeCommandRunner(cmd.Name),
		//)
	}

	return cmds, nil
}

// makeCommandRunner creates the run function for an inferred command
func makeCommandRunner(name string) func(*script.State, ...string) (script.WaitFunc, error) {
	return func(s *script.State, args ...string) (script.WaitFunc, error) {
		cmd := exec.Command(name, args...)
		cmd.Dir = s.Getwd()
		fmt.Println("dir:", cmd.Dir)
		
		var stdout, stderr strings.Builder
		cmd.Stdout = &stdout
		cmd.Stderr = &stderr
		cmd.Env = s.Environ()
		
		if err := cmd.Start(); err != nil {
			return nil, err
		}

		wait := func(*script.State) (string, string, error) {
			err := cmd.Wait()
			return stdout.String(), stderr.String(), err
		}
		return wait, nil
	}
}

// loadCommandInfo loads the command info from .scripttest_info
func loadCommandInfo() ([]CommandInfo, error) {
	data, err := os.ReadFile(".scripttest_info")
	if err != nil {
		return nil, err
	}

	var info []CommandInfo
	if err := json.Unmarshal(data, &info); err != nil {
		return nil, fmt.Errorf("invalid command info format: %v", err)
	}
	if testing.Verbose() { fmt.Printf("loaded %d commands from .scripttest_info\n", len(info)) }

	return info, nil
}
