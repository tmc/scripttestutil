// Code generated by scripttestutil scripttest; DO NOT EDIT.
package main

import (
	"context"
	"encoding/json"
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"testing"
	"time"
	"io/ioutil"
	"runtime"

	"rsc.io/script"
	"rsc.io/script/scripttest"
)

// Build: {{.BuildID}}

func Test(t *testing.T) {
	// Start with default commands
	cmds := scripttest.DefaultCmds()

	// Add snapshot command
	cmds["snapshot"] = script.Command(
		script.CmdUsage{
			Summary: "Record command output",
			Args:    "[-timeout=duration]",
		},
		func(s *script.State, args ...string) (script.WaitFunc, error) {
			var timeout time.Duration
			// Parse timeout if provided
			if len(args) > 0 && strings.HasPrefix(args[0], "-timeout=") {
				timeoutStr := strings.TrimPrefix(args[0], "-timeout=")
				var err error
				timeout, err = time.ParseDuration(timeoutStr)
				if err != nil {
					return nil, fmt.Errorf("invalid timeout value: %v", err)
				}
				args = args[1:] // Remove timeout argument
			}
			
			// Create snapshot directory if it doesn't exist
			snapshotDir := filepath.Join("testdata", "__snapshots__")
			if err := os.MkdirAll(snapshotDir, 0755); err != nil {
				return nil, fmt.Errorf("failed to create snapshot directory: %v", err)
			}

			// Generate snapshot filename using test name
			testName := filepath.Base(s.Getwd())
			filename := filepath.Join(snapshotDir, testName+".json")
			
			// If timeout is specified, wait for the specified duration
			if timeout > 0 {
				time.Sleep(timeout)
			}
			
			// Get the command output
			stdout := s.Stdout()
			stderr := s.Stderr()
			
			// Check if we're updating snapshots
			if os.Getenv("UPDATE_SNAPSHOTS") == "1" {
				content := map[string]string{
					"stdout": stdout,
					"stderr": stderr,
				}
				data, err := json.MarshalIndent(content, "", "  ")
				if err != nil {
					return nil, fmt.Errorf("failed to marshal snapshot: %v", err)
				}
				if err := ioutil.WriteFile(filename, data, 0644); err != nil {
					return nil, fmt.Errorf("failed to write snapshot: %v", err)
				}
				return func(*script.State) (string, string, error) {
					return "", "", nil
				}, nil
			}
			
			// Read existing snapshot
			data, err := ioutil.ReadFile(filename)
			if err != nil {
				if os.IsNotExist(err) {
					return nil, fmt.Errorf("snapshot does not exist. Run with UPDATE_SNAPSHOTS=1 to create")
				}
				return nil, fmt.Errorf("failed to read snapshot: %v", err)
			}
			
			// Parse snapshot content
			var content map[string]string
			if err := json.Unmarshal(data, &content); err != nil {
				return nil, fmt.Errorf("invalid snapshot format: %v", err)
			}
			
			// Compare with current output
			if content["stdout"] != stdout || content["stderr"] != stderr {
				return nil, fmt.Errorf("output does not match snapshot")
			}
			
			return func(*script.State) (string, string, error) {
				return "", "", nil
			}, nil
		},
	)

	// Get default conditions
	conds := scripttest.DefaultConds()

	// Add OS-specific conditions
	conds["unix"] = script.OnceCondition("unix system", func() (bool, error) {
		return runtime.GOOS != "windows", nil
	})
	conds["windows"] = script.OnceCondition("windows system", func() (bool, error) {
		return runtime.GOOS == "windows", nil
	})
	conds["darwin"] = script.OnceCondition("darwin system", func() (bool, error) {
		return runtime.GOOS == "darwin", nil
	})
	conds["linux"] = script.OnceCondition("linux system", func() (bool, error) {
		return runtime.GOOS == "linux", nil
	})

	engine := &script.Engine{
		Cmds:  cmds,
		Conds: conds,
		Quiet: !testing.Verbose(),
	}

	pattern := "testdata/*.txt"
	if v := os.Getenv("SCRIPTTEST_PATTERN"); v != "" {
		pattern = v
	}

	// Start with minimal environment
	env := []string{
		"PATH=" + os.Getenv("PATH"), // Keep the host's PATH to find commands
		"HOME=" + os.Getenv("HOME"),
		"TMPDIR=" + os.TempDir(),
		"SCRIPTTEST_PATTERN=" + pattern,
	}

	// Add gopath bin paths
	if gopath := os.Getenv("GOPATH"); gopath != "" {
		env = append(env, "GOPATH=" + gopath)
	}

	t.Log("starting up")
	scripttest.Test(t, context.Background(), engine, env, pattern)
}

// CommandInfo describes an inferred command
type CommandInfo struct {
	Name    string `json:"name"`    // command name
	Summary string `json:"summary"` // usage summary
	Args    string `json:"args"`    // argument pattern
}

// addInferredCommands adds commands from .scripttest_info to the engine
func addInferredCommands(cmds map[string]script.Cmd) (map[string]script.Cmd, error) {
	info, err := loadCommandInfo()
	if err != nil {
		if os.IsNotExist(err) {
			return cmds, nil // no info file is ok
		}
		return nil, fmt.Errorf("failed to load command info: %v", err)
	}

	// Create a command that runs the program
	interrupt := func(cmd *exec.Cmd) error { return cmd.Process.Signal(os.Interrupt) }
	gracePeriod := 30 * time.Second // arbitrary
	// Add each command from info
	for _, cmd := range info {
		if _, exists := cmds[cmd.Name]; exists {
			continue // don't override built-in commands
		}

		cmds[cmd.Name] = script.Program(cmd.Name, interrupt, gracePeriod)
		//cmds[cmd.Name] = script.Command(
		//	script.CmdUsage{
		//		Summary: cmd.Summary,
		//		Args:    cmd.Args,
		//	},
		//	makeCommandRunner(cmd.Name),
		//)
	}

	return cmds, nil
}

// makeCommandRunner creates the run function for an inferred command
func makeCommandRunner(name string) func(*script.State, ...string) (script.WaitFunc, error) {
	return func(s *script.State, args ...string) (script.WaitFunc, error) {
		cmd := exec.Command(name, args...)
		cmd.Dir = s.Getwd()
		fmt.Println("dir:", cmd.Dir)
		
		var stdout, stderr strings.Builder
		cmd.Stdout = &stdout
		cmd.Stderr = &stderr
		cmd.Env = s.Environ()
		
		if err := cmd.Start(); err != nil {
			return nil, err
		}

		wait := func(*script.State) (string, string, error) {
			err := cmd.Wait()
			return stdout.String(), stderr.String(), err
		}
		return wait, nil
	}
}

// loadCommandInfo loads the command info from .scripttest_info
func loadCommandInfo() ([]CommandInfo, error) {
	data, err := os.ReadFile(".scripttest_info")
	if err != nil {
		return nil, err
	}

	var info []CommandInfo
	if err := json.Unmarshal(data, &info); err != nil {
		return nil, fmt.Errorf("invalid command info format: %v", err)
	}
	if testing.Verbose() { fmt.Printf("loaded %d commands from .scripttest_info\n", len(info)) }

	return info, nil
}
